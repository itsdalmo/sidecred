// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"sync"

	githuba "github.com/google/go-github/v45/github"
	"github.com/telia-oss/githubapp"
	"github.com/telia-oss/sidecred/store/github"
)

type FakeApp struct {
	CreateInstallationTokenStub        func(string, []string, *githubapp.Permissions) (*githubapp.Token, error)
	createInstallationTokenMutex       sync.RWMutex
	createInstallationTokenArgsForCall []struct {
		arg1 string
		arg2 []string
		arg3 *githubapp.Permissions
	}
	createInstallationTokenReturns struct {
		result1 *githubapp.Token
		result2 error
	}
	createInstallationTokenReturnsOnCall map[int]struct {
		result1 *githubapp.Token
		result2 error
	}
	RateLimitsStub        func() (*githuba.RateLimits, *githuba.Response, error)
	rateLimitsMutex       sync.RWMutex
	rateLimitsArgsForCall []struct {
	}
	rateLimitsReturns struct {
		result1 *githuba.RateLimits
		result2 *githuba.Response
		result3 error
	}
	rateLimitsReturnsOnCall map[int]struct {
		result1 *githuba.RateLimits
		result2 *githuba.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeApp) CreateInstallationToken(arg1 string, arg2 []string, arg3 *githubapp.Permissions) (*githubapp.Token, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createInstallationTokenMutex.Lock()
	ret, specificReturn := fake.createInstallationTokenReturnsOnCall[len(fake.createInstallationTokenArgsForCall)]
	fake.createInstallationTokenArgsForCall = append(fake.createInstallationTokenArgsForCall, struct {
		arg1 string
		arg2 []string
		arg3 *githubapp.Permissions
	}{arg1, arg2Copy, arg3})
	stub := fake.CreateInstallationTokenStub
	fakeReturns := fake.createInstallationTokenReturns
	fake.recordInvocation("CreateInstallationToken", []interface{}{arg1, arg2Copy, arg3})
	fake.createInstallationTokenMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeApp) CreateInstallationTokenCallCount() int {
	fake.createInstallationTokenMutex.RLock()
	defer fake.createInstallationTokenMutex.RUnlock()
	return len(fake.createInstallationTokenArgsForCall)
}

func (fake *FakeApp) CreateInstallationTokenCalls(stub func(string, []string, *githubapp.Permissions) (*githubapp.Token, error)) {
	fake.createInstallationTokenMutex.Lock()
	defer fake.createInstallationTokenMutex.Unlock()
	fake.CreateInstallationTokenStub = stub
}

func (fake *FakeApp) CreateInstallationTokenArgsForCall(i int) (string, []string, *githubapp.Permissions) {
	fake.createInstallationTokenMutex.RLock()
	defer fake.createInstallationTokenMutex.RUnlock()
	argsForCall := fake.createInstallationTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeApp) CreateInstallationTokenReturns(result1 *githubapp.Token, result2 error) {
	fake.createInstallationTokenMutex.Lock()
	defer fake.createInstallationTokenMutex.Unlock()
	fake.CreateInstallationTokenStub = nil
	fake.createInstallationTokenReturns = struct {
		result1 *githubapp.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeApp) CreateInstallationTokenReturnsOnCall(i int, result1 *githubapp.Token, result2 error) {
	fake.createInstallationTokenMutex.Lock()
	defer fake.createInstallationTokenMutex.Unlock()
	fake.CreateInstallationTokenStub = nil
	if fake.createInstallationTokenReturnsOnCall == nil {
		fake.createInstallationTokenReturnsOnCall = make(map[int]struct {
			result1 *githubapp.Token
			result2 error
		})
	}
	fake.createInstallationTokenReturnsOnCall[i] = struct {
		result1 *githubapp.Token
		result2 error
	}{result1, result2}
}

func (fake *FakeApp) RateLimits() (*githuba.RateLimits, *githuba.Response, error) {
	fake.rateLimitsMutex.Lock()
	ret, specificReturn := fake.rateLimitsReturnsOnCall[len(fake.rateLimitsArgsForCall)]
	fake.rateLimitsArgsForCall = append(fake.rateLimitsArgsForCall, struct {
	}{})
	stub := fake.RateLimitsStub
	fakeReturns := fake.rateLimitsReturns
	fake.recordInvocation("RateLimits", []interface{}{})
	fake.rateLimitsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeApp) RateLimitsCallCount() int {
	fake.rateLimitsMutex.RLock()
	defer fake.rateLimitsMutex.RUnlock()
	return len(fake.rateLimitsArgsForCall)
}

func (fake *FakeApp) RateLimitsCalls(stub func() (*githuba.RateLimits, *githuba.Response, error)) {
	fake.rateLimitsMutex.Lock()
	defer fake.rateLimitsMutex.Unlock()
	fake.RateLimitsStub = stub
}

func (fake *FakeApp) RateLimitsReturns(result1 *githuba.RateLimits, result2 *githuba.Response, result3 error) {
	fake.rateLimitsMutex.Lock()
	defer fake.rateLimitsMutex.Unlock()
	fake.RateLimitsStub = nil
	fake.rateLimitsReturns = struct {
		result1 *githuba.RateLimits
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeApp) RateLimitsReturnsOnCall(i int, result1 *githuba.RateLimits, result2 *githuba.Response, result3 error) {
	fake.rateLimitsMutex.Lock()
	defer fake.rateLimitsMutex.Unlock()
	fake.RateLimitsStub = nil
	if fake.rateLimitsReturnsOnCall == nil {
		fake.rateLimitsReturnsOnCall = make(map[int]struct {
			result1 *githuba.RateLimits
			result2 *githuba.Response
			result3 error
		})
	}
	fake.rateLimitsReturnsOnCall[i] = struct {
		result1 *githuba.RateLimits
		result2 *githuba.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeApp) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createInstallationTokenMutex.RLock()
	defer fake.createInstallationTokenMutex.RUnlock()
	fake.rateLimitsMutex.RLock()
	defer fake.rateLimitsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeApp) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.App = new(FakeApp)
