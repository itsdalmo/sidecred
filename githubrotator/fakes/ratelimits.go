// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/google/go-github/v45/github"
	"github.com/telia-oss/sidecred/githubrotator"
)

type FakeRateLimits struct {
	GetTokenRateLimitsStub        func(context.Context, string) (*github.RateLimits, *github.Response, error)
	getTokenRateLimitsMutex       sync.RWMutex
	getTokenRateLimitsArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getTokenRateLimitsReturns struct {
		result1 *github.RateLimits
		result2 *github.Response
		result3 error
	}
	getTokenRateLimitsReturnsOnCall map[int]struct {
		result1 *github.RateLimits
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRateLimits) GetTokenRateLimits(arg1 context.Context, arg2 string) (*github.RateLimits, *github.Response, error) {
	fake.getTokenRateLimitsMutex.Lock()
	ret, specificReturn := fake.getTokenRateLimitsReturnsOnCall[len(fake.getTokenRateLimitsArgsForCall)]
	fake.getTokenRateLimitsArgsForCall = append(fake.getTokenRateLimitsArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetTokenRateLimitsStub
	fakeReturns := fake.getTokenRateLimitsReturns
	fake.recordInvocation("GetTokenRateLimits", []interface{}{arg1, arg2})
	fake.getTokenRateLimitsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRateLimits) GetTokenRateLimitsCallCount() int {
	fake.getTokenRateLimitsMutex.RLock()
	defer fake.getTokenRateLimitsMutex.RUnlock()
	return len(fake.getTokenRateLimitsArgsForCall)
}

func (fake *FakeRateLimits) GetTokenRateLimitsCalls(stub func(context.Context, string) (*github.RateLimits, *github.Response, error)) {
	fake.getTokenRateLimitsMutex.Lock()
	defer fake.getTokenRateLimitsMutex.Unlock()
	fake.GetTokenRateLimitsStub = stub
}

func (fake *FakeRateLimits) GetTokenRateLimitsArgsForCall(i int) (context.Context, string) {
	fake.getTokenRateLimitsMutex.RLock()
	defer fake.getTokenRateLimitsMutex.RUnlock()
	argsForCall := fake.getTokenRateLimitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRateLimits) GetTokenRateLimitsReturns(result1 *github.RateLimits, result2 *github.Response, result3 error) {
	fake.getTokenRateLimitsMutex.Lock()
	defer fake.getTokenRateLimitsMutex.Unlock()
	fake.GetTokenRateLimitsStub = nil
	fake.getTokenRateLimitsReturns = struct {
		result1 *github.RateLimits
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRateLimits) GetTokenRateLimitsReturnsOnCall(i int, result1 *github.RateLimits, result2 *github.Response, result3 error) {
	fake.getTokenRateLimitsMutex.Lock()
	defer fake.getTokenRateLimitsMutex.Unlock()
	fake.GetTokenRateLimitsStub = nil
	if fake.getTokenRateLimitsReturnsOnCall == nil {
		fake.getTokenRateLimitsReturnsOnCall = make(map[int]struct {
			result1 *github.RateLimits
			result2 *github.Response
			result3 error
		})
	}
	fake.getTokenRateLimitsReturnsOnCall[i] = struct {
		result1 *github.RateLimits
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRateLimits) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTokenRateLimitsMutex.RLock()
	defer fake.getTokenRateLimitsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRateLimits) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ githubrotator.RateLimits = new(FakeRateLimits)
